{"version":3,"sources":["webpack:///../../../src/components/VOverlay/index.ts","webpack:///../../../src/mixins/bootable/index.ts","webpack:///../../../src/directives/click-outside/index.ts","webpack:///../../../src/components/VOverlay/VOverlay.ts","webpack:///../../../src/mixins/dependent/index.ts","webpack:///../../../src/mixins/overlayable/index.ts"],"names":["name","props","eager","Boolean","data","isBooted","computed","hasContent","this","watch","isActive","created","methods","showLazyContent","content","defaultConditional","directive","handler","binding","e","elements","el","setTimeout","ClickOutside","inserted","onClick","app","document","unbind","absolute","color","type","default","dark","opacity","Number","value","zIndex","__scrim","setBackgroundColor","staticClass","style","computedOpacity","$createElement","classes","themeClasses","styles","genContent","$slots","render","children","h","class","searchChildren","results","index","child","closeDependents","isDependent","openDependents","getOpenDependents","getOpenDependentElements","result","getClickableDependentElements","$refs","overlay","hideOverlay","overlayColor","overlayOpacity","String","animationFrame","genOverlay","beforeDestroy","createOverlay","propsData","parent","$el","requestAnimationFrame","removeOverlay","showScroll","cancelAnimationFrame","scrollListener","includes","up","down","checkPath","hasScrollbar","Node","window","shouldScroll","delta","isInside","path","composedPath","dialog","selected","hideScroll","$vuetify","breakpoint","passive"],"mappings":"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","file":"js/chunk-0ec5ddae.fb56ebfb.js","sourcesContent":["import VOverlay from './VOverlay'\n\nexport { VOverlay }\n\nexport default VOverlay\n","// Utilities\nimport { removed } from '../../util/console'\n\n// Types\nimport Vue, { VNode } from 'vue'\ninterface Toggleable extends Vue {\n  isActive?: boolean\n}\n\n/**\n * Bootable\n * @mixin\n *\n * Used to add lazy content functionality to components\n * Looks for change in \"isActive\" to automatically boot\n * Otherwise can be set manually\n */\n/* @vue/component */\nexport default Vue.extend<Vue & Toggleable>().extend({\n  name: 'bootable',\n\n  props: {\n    eager: Boolean,\n  },\n\n  data: () => ({\n    isBooted: false,\n  }),\n\n  computed: {\n    hasContent (): boolean | undefined {\n      return this.isBooted || this.eager || this.isActive\n    },\n  },\n\n  watch: {\n    isActive () {\n      this.isBooted = true\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if ('lazy' in this.$attrs) {\n      removed('lazy', this)\n    }\n  },\n\n  methods: {\n    showLazyContent (content?: () => VNode[]): VNode[] {\n      return (this.hasContent && content) ? content() : [this.$createElement()]\n    },\n  },\n})\n","import { VNodeDirective } from 'vue/types/vnode'\n\ninterface ClickOutsideBindingArgs {\n  handler: (e: Event) => void\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirective extends VNodeDirective {\n  value?: ((e: Event) => void) | ClickOutsideBindingArgs\n}\n\nfunction defaultConditional () {\n  return true\n}\n\nfunction directive (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective): void {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value!.handler\n\n  const isActive = (typeof binding.value === 'object' && binding.value.closeConditional) || defaultConditional\n\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || isActive(e) === false) return\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = ((typeof binding.value === 'object' && binding.value.include) || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  !elements.some(el => el.contains(e.target as Node)) && setTimeout(() => {\n    isActive(e) && handler && handler(e)\n  }, 0)\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted (el: HTMLElement, binding: ClickOutsideDirective) {\n    const onClick = (e: Event) => directive(e as PointerEvent, el, binding)\n    // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app.addEventListener('click', onClick, true)\n    el._clickOutside = onClick\n  },\n\n  unbind (el: HTMLElement) {\n    if (!el._clickOutside) return\n\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app && app.removeEventListener('click', el._clickOutside, true)\n    delete el._clickOutside\n  },\n}\n\nexport default ClickOutside\n","// Styles\nimport './VOverlay.sass'\n\n// Mixins\nimport Colorable from './../../mixins/colorable'\nimport Themeable from '../../mixins/themeable'\nimport Toggleable from './../../mixins/toggleable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\n\n/* @vue/component */\nexport default mixins(\n  Colorable,\n  Themeable,\n  Toggleable\n).extend({\n  name: 'v-overlay',\n\n  props: {\n    absolute: Boolean,\n    color: {\n      type: String,\n      default: '#212121',\n    },\n    dark: {\n      type: Boolean,\n      default: true,\n    },\n    opacity: {\n      type: [Number, String],\n      default: 0.46,\n    },\n    value: {\n      default: true,\n    },\n    zIndex: {\n      type: [Number, String],\n      default: 5,\n    },\n  },\n\n  computed: {\n    __scrim (): VNode {\n      const data = this.setBackgroundColor(this.color, {\n        staticClass: 'v-overlay__scrim',\n        style: {\n          opacity: this.computedOpacity,\n        },\n      })\n\n      return this.$createElement('div', data)\n    },\n    classes (): object {\n      return {\n        'v-overlay--absolute': this.absolute,\n        'v-overlay--active': this.isActive,\n        ...this.themeClasses,\n      }\n    },\n    computedOpacity (): number {\n      return Number(this.isActive ? this.opacity : 0)\n    },\n    styles (): object {\n      return {\n        zIndex: this.zIndex,\n      }\n    },\n  },\n\n  methods: {\n    genContent () {\n      return this.$createElement('div', {\n        staticClass: 'v-overlay__content',\n      }, this.$slots.default)\n    },\n  },\n\n  render (h): VNode {\n    const children = [this.__scrim]\n\n    if (this.isActive) children.push(this.genContent())\n\n    return h('div', {\n      staticClass: 'v-overlay',\n      class: this.classes,\n      style: this.styles,\n    }, children)\n  },\n})\n","import Vue from 'vue'\n\nimport mixins from '../../util/mixins'\nimport { VOverlay } from '../../components/VOverlay'\n\ninterface options extends Vue {\n  $el: HTMLElement\n  $refs: {\n    content: HTMLElement\n  }\n  overlay?: InstanceType<typeof VOverlay>\n}\n\ninterface DependentInstance extends Vue {\n  isActive?: boolean\n  isDependent?: boolean\n}\n\nfunction searchChildren (children: Vue[]): DependentInstance[] {\n  const results = []\n  for (let index = 0; index < children.length; index++) {\n    const child = children[index] as DependentInstance\n    if (child.isActive && child.isDependent) {\n      results.push(child)\n    } else {\n      results.push(...searchChildren(child.$children))\n    }\n  }\n\n  return results\n}\n\n/* @vue/component */\nexport default mixins<options>().extend({\n  name: 'dependent',\n\n  data () {\n    return {\n      closeDependents: true,\n      isActive: false,\n      isDependent: true,\n    }\n  },\n\n  watch: {\n    isActive (val) {\n      if (val) return\n\n      const openDependents = this.getOpenDependents()\n      for (let index = 0; index < openDependents.length; index++) {\n        openDependents[index].isActive = false\n      }\n    },\n  },\n\n  methods: {\n    getOpenDependents (): any[] {\n      if (this.closeDependents) return searchChildren(this.$children)\n\n      return []\n    },\n    getOpenDependentElements (): HTMLElement[] {\n      const result = []\n      const openDependents = this.getOpenDependents()\n\n      for (let index = 0; index < openDependents.length; index++) {\n        result.push(...openDependents[index].getClickableDependentElements())\n      }\n\n      return result\n    },\n    getClickableDependentElements (): HTMLElement[] {\n      const result = [this.$el]\n      if (this.$refs.content) result.push(this.$refs.content)\n      if (this.overlay) result.push(this.overlay.$el as HTMLElement)\n      result.push(...this.getOpenDependentElements())\n\n      return result\n    },\n  },\n})\n","// Components\nimport VOverlay from '../../components/VOverlay'\n\n// Utilities\nimport {\n  keyCodes,\n  addOnceEventListener,\n  addPassiveEventListener,\n  getZIndex,\n} from '../../util/helpers'\n\n// Types\nimport Vue from 'vue'\n\ninterface Toggleable extends Vue {\n  isActive?: boolean\n}\n\ninterface Stackable extends Vue {\n  activeZIndex: number\n}\n\ninterface options {\n  absolute?: boolean\n  $refs: {\n    dialog?: HTMLElement\n    content?: HTMLElement\n  }\n}\n\n/* @vue/component */\nexport default Vue.extend<Vue & Toggleable & Stackable & options>().extend({\n  name: 'overlayable',\n\n  props: {\n    hideOverlay: Boolean,\n    overlayColor: String,\n    overlayOpacity: [Number, String],\n  },\n\n  data () {\n    return {\n      animationFrame: 0,\n      overlay: null as InstanceType<typeof VOverlay> | null,\n    }\n  },\n\n  watch: {\n    hideOverlay (value) {\n      if (!this.isActive) return\n\n      if (value) this.removeOverlay()\n      else this.genOverlay()\n    },\n  },\n\n  beforeDestroy () {\n    this.removeOverlay()\n  },\n\n  methods: {\n    createOverlay () {\n      const overlay = new VOverlay({\n        propsData: {\n          absolute: this.absolute,\n          value: false,\n          color: this.overlayColor,\n          opacity: this.overlayOpacity,\n        },\n      })\n\n      overlay.$mount()\n\n      const parent = this.absolute\n        ? this.$el.parentNode\n        : document.querySelector('[data-app]')\n\n      parent && parent.insertBefore(overlay.$el, parent.firstChild)\n\n      this.overlay = overlay\n    },\n    genOverlay () {\n      this.hideScroll()\n\n      if (this.hideOverlay) return\n\n      if (!this.overlay) this.createOverlay()\n\n      this.animationFrame = requestAnimationFrame(() => {\n        if (!this.overlay) return\n\n        if (this.activeZIndex !== undefined) {\n          this.overlay.zIndex = String(this.activeZIndex - 1)\n        } else if (this.$el) {\n          this.overlay.zIndex = getZIndex(this.$el)\n        }\n\n        this.overlay.value = true\n      })\n\n      return true\n    },\n    /** removeOverlay(false) will not restore the scollbar afterwards */\n    removeOverlay (showScroll = true) {\n      if (this.overlay) {\n        addOnceEventListener(this.overlay.$el, 'transitionend', () => {\n          if (\n            !this.overlay ||\n            !this.overlay.$el ||\n            !this.overlay.$el.parentNode ||\n            this.overlay.value\n          ) return\n\n          this.overlay.$el.parentNode.removeChild(this.overlay.$el)\n          this.overlay.$destroy()\n          this.overlay = null\n        })\n\n        // Cancel animation frame in case\n        // overlay is removed before it\n        // has finished its animation\n        cancelAnimationFrame(this.animationFrame)\n\n        this.overlay.value = false\n      }\n\n      showScroll && this.showScroll()\n    },\n    scrollListener (e: WheelEvent & KeyboardEvent) {\n      if (e.type === 'keydown') {\n        if (\n          ['INPUT', 'TEXTAREA', 'SELECT'].includes((e.target as Element).tagName) ||\n          // https://github.com/vuetifyjs/vuetify/issues/4715\n          (e.target as HTMLElement).isContentEditable\n        ) return\n\n        const up = [keyCodes.up, keyCodes.pageup]\n        const down = [keyCodes.down, keyCodes.pagedown]\n\n        if (up.includes(e.keyCode)) {\n          (e as any).deltaY = -1\n        } else if (down.includes(e.keyCode)) {\n          (e as any).deltaY = 1\n        } else {\n          return\n        }\n      }\n\n      if (e.target === this.overlay ||\n        (e.type !== 'keydown' && e.target === document.body) ||\n        this.checkPath(e)) e.preventDefault()\n    },\n    hasScrollbar (el?: Element) {\n      if (!el || el.nodeType !== Node.ELEMENT_NODE) return false\n\n      const style = window.getComputedStyle(el)\n      return ['auto', 'scroll'].includes(style.overflowY!) && el.scrollHeight > el.clientHeight\n    },\n    shouldScroll (el: Element, delta: number) {\n      if (el.scrollTop === 0 && delta < 0) return true\n      return el.scrollTop + el.clientHeight === el.scrollHeight && delta > 0\n    },\n    isInside (el: Element, parent: Element): boolean {\n      if (el === parent) {\n        return true\n      } else if (el === null || el === document.body) {\n        return false\n      } else {\n        return this.isInside(el.parentNode as Element, parent)\n      }\n    },\n    checkPath (e: WheelEvent) {\n      const path = e.path || this.composedPath(e)\n      const delta = e.deltaY\n\n      if (e.type === 'keydown' && path[0] === document.body) {\n        const dialog = this.$refs.dialog\n        // getSelection returns null in firefox in some edge cases, can be ignored\n        const selected = window.getSelection()!.anchorNode as Element\n        if (dialog && this.hasScrollbar(dialog) && this.isInside(selected, dialog)) {\n          return this.shouldScroll(dialog, delta)\n        }\n        return true\n      }\n\n      for (let index = 0; index < path.length; index++) {\n        const el = path[index]\n\n        if (el === document) return true\n        if (el === document.documentElement) return true\n        if (el === this.$refs.content) return true\n\n        if (this.hasScrollbar(el as Element)) return this.shouldScroll(el as Element, delta)\n      }\n\n      return true\n    },\n    /**\n     * Polyfill for Event.prototype.composedPath\n     */\n    composedPath (e: WheelEvent): EventTarget[] {\n      if (e.composedPath) return e.composedPath()\n\n      const path = []\n      let el = e.target as Element\n\n      while (el) {\n        path.push(el)\n\n        if (el.tagName === 'HTML') {\n          path.push(document)\n          path.push(window)\n\n          return path\n        }\n\n        el = el.parentElement!\n      }\n      return path\n    },\n    hideScroll () {\n      if (this.$vuetify.breakpoint.smAndDown) {\n        document.documentElement!.classList.add('overflow-y-hidden')\n      } else {\n        addPassiveEventListener(window, 'wheel', this.scrollListener as EventHandlerNonNull, { passive: false })\n        window.addEventListener('keydown', this.scrollListener as EventHandlerNonNull)\n      }\n    },\n    showScroll () {\n      document.documentElement!.classList.remove('overflow-y-hidden')\n      window.removeEventListener('wheel', this.scrollListener as EventHandlerNonNull)\n      window.removeEventListener('keydown', this.scrollListener as EventHandlerNonNull)\n    },\n  },\n})\n"],"sourceRoot":""}